{"version":3,"sources":["components/CardMovie.jsx","components/MovieList.jsx","services/ApiMoviesService.jsx","views/MoviesCategory.jsx","views/MovieDetail.jsx","views/NotFound.jsx","components/NavigationBar.jsx","App.js","serviceWorker.js","index.js"],"names":["CardMovie","movie","className","style","width","height","src","poster_path","alt","original_title","rating","vote_average","starRatedColor","numberOfStars","name","starDimension","starSpacing","MovieList","movies","map","to","id","key","this","APIKEY","categoryAPI","page","axios","get","data","MoviesCategory","props","state","currentCategory","updatingFilms","getDataMoviesFromAPI","match","params","categoryName","category","ApiMoviesService","getMoviesByCategory","dataMoviesFromApi","setState","results","Component","MovieDetail","getMovieFromAPI","currentMovieId","dataMovieFromApi","undefined","backgroundImage","backdrop_path","title","release_date","href","homepage","target","rel","isFiveStarsUndefined","tagline","overview","NotFound","withRouter","type","onClick","history","goBack","activeClassName","App","basename","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c70f5e93.chunk.js","sourcesContent":["import React from 'react';\r\nimport StarRatings from 'react-star-ratings';\r\nimport './CardMovie.css';\r\n\r\n\r\nfunction CardMovie({ movie }) {\r\n    return (\r\n        <div className=\"CardMovie\">\r\n            <div className=\"card\" style={{ width: \"12rem\" }}>\r\n                <img className=\"card-img-top\" style={{ height: \"18rem\" }} src={`https://image.tmdb.org/t/p/w300/${movie.poster_path}`} alt=\"Cover Page \" />\r\n                <div className=\"body-card\" style={{ height: \"6rem\" }}>\r\n                    <div className=\"text-card\">{movie.original_title}</div>\r\n                    <StarRatings\r\n                        className=\"star-rate\"\r\n                        rating={movie.vote_average / 2}\r\n                        starRatedColor=\"#4DFF00\"\r\n                        numberOfStars={5}\r\n                        name='rating'\r\n                        starDimension=\"1.3rem\"\r\n                        starSpacing=\"0.1rem\"\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardMovie;","import React from 'react';\r\nimport CardMovie from './CardMovie'\r\nimport {Link} from 'react-router-dom';\r\nimport './MovieList.css';\r\n\r\n\r\n\r\n\r\nfunction MovieList({ movies }) {\r\n  return (\r\n    <div className='MovieList'>\r\n      {movies.map(movie => (\r\n        <Link to={'/movie/' + movie.id} key={movie.id}>\r\n          <CardMovie movie={movie} key={movie.id} />\r\n        </Link>\r\n\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieList;","import axios from 'axios';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.APIKEY = '59736b18d8c85c42d5e6972d751046c6';\r\n  }\r\n\r\n  async getMoviesByCategory(categoryAPI, page = 1) {\r\n\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${categoryAPI}?api_key=${this.APIKEY}&language=es-ES&page=${page}`,\r\n    );\r\n    return data;\r\n  }\r\n\r\n  async getMovieById(id) {\r\n    const { data } = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${this.APIKEY}&language=es-ES`,\r\n    );\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n","import React, {Component} from 'react';\r\nimport MovieList from '../components/MovieList';\r\nimport ApiMoviesService from '../services/ApiMoviesService';\r\n\r\n\r\nclass MoviesCategory extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            movies: [],\r\n            currentCategory: '',\r\n            updatingFilms: false,\r\n        };\r\n\r\n    }\r\n\r\n    // static getDerivedStateFromProps(props, state){\r\n    //     return null\r\n    // }\r\n\r\n    componentDidMount(){\r\n        this.getDataMoviesFromAPI()\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.state.currentCategory !== this.props.match.params.categoryName){\r\n            this.getDataMoviesFromAPI()\r\n        }\r\n    }\r\n\r\n    async getDataMoviesFromAPI() {\r\n        const category = this.props.match.params.categoryName;\r\n        const dataMoviesFromApi = await ApiMoviesService.getMoviesByCategory(category);\r\n        this.setState({\r\n            movies: dataMoviesFromApi.results,\r\n            currentCategory: category\r\n        })\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='MoviesCategory'>\r\n                <MovieList movies={this.state.movies}/>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MoviesCategory;","import React, { Component } from 'react';\r\nimport ApiMoviesService from '../services/ApiMoviesService';\r\nimport StarRatings from 'react-star-ratings';\r\nimport './MovieDetail.css';\r\n\r\n\r\nclass MovieDetail extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      movie: [],\r\n    };\r\n\r\n    this.getMovieFromAPI()\r\n\r\n  }\r\n\r\n  async getMovieFromAPI() {\r\n    const currentMovieId = this.props.match.params.id;\r\n    const dataMovieFromApi = await ApiMoviesService.getMoviesByCategory(currentMovieId);\r\n    this.setState({\r\n      movie: dataMovieFromApi,\r\n    })\r\n\r\n  }\r\n\r\n  isFiveStarsUndefined() {\r\n    if (this.state.movie.vote_average === undefined) {\r\n      return 0\r\n    } else {\r\n      return this.state.movie.vote_average / 2\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const movie = this.state.movie\r\n\r\n    return (\r\n      <div className='MovieDetail'>\r\n        <div className='header-photo'\r\n          style={{\r\n            backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie.backdrop_path}')`\r\n          }}>\r\n          <h1 className=\"film-title\">{movie.title}</h1>\r\n          <h6 className=\"origin-title-date\">{movie.original_title} ({movie.release_date})</h6>\r\n          <a className=\"link-movie\" href={movie.homepage} target=\"_blank\" rel=\"noopener noreferrer\">{movie.homepage}</a>\r\n          <div className=\"rate-stars-movie\">\r\n            <StarRatings\r\n              rating={this.isFiveStarsUndefined()}\r\n              starRatedColor=\"#4DFF00\"\r\n              numberOfStars={5}\r\n              name='rating'\r\n              starDimension=\"2rem\"\r\n              starSpacing=\"0.2rem\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"below-description\">\r\n          <h4 className=\"one-sentence-description\">{movie.tagline}</h4>\r\n          <h4 className=\"text-description\">{movie.overview}</h4>\r\n        </div>\r\n\r\n      </div >\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default MovieDetail;","import React from 'react';\r\n\r\n\r\nfunction NotFound () {\r\n    return (\r\n      <div className='NotFound'>\r\n        <h1>NOT FOUND</h1>\r\n        <h1>404</h1>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport './NavigationBar.css';\r\n\r\n\r\n\r\nfunction Navigation(props) {\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <form className=\"navigationBar\">\r\n        <div>\r\n          <button className=\"btn btn-dark\" type=\"button\" onClick={() => props.history.goBack()} >Atras</button>\r\n        </div>\r\n        <div>\r\n          <NavLink className=\"navigation-link\" to='/category/popular' activeClassName='no-active'>\r\n            <button className=\"btn btn-dark\" type=\"button\">Popular</button>\r\n          </NavLink>\r\n          <NavLink className=\"navigation-link\" to='/category/top_rated' activeClassName='no-active'>\r\n            <button className=\"btn btn-dark\" type=\"button\">Mejor Valoradas</button>\r\n          </NavLink>\r\n          <NavLink className=\"navigation-link\" to='/category/upcoming' activeClassName='no-active'>\r\n            <button className=\"btn btn-dark\" type=\"button\">Proximamente</button>\r\n          </NavLink>\r\n          <NavLink className=\"navigation-link\" to='/category/now_playing' activeClassName='no-active'>\r\n            <button className=\"btn btn-dark\" type=\"button\">Cartelera</button>\r\n          </NavLink>\r\n        </div>\r\n      </form>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default withRouter(Navigation);","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Redirect, HashRouter } from 'react-router-dom';\nimport MoviesCategory from './views/MoviesCategory';\nimport MovieDetail from './views/MovieDetail';\nimport NotFound from './views/NotFound';\nimport NavigationBar from './components/NavigationBar';\n\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <HashRouter basename='/'>\n        {/* <BrowserRouter> */}\n          <NavigationBar />\n          <Switch>\n            <Route path=\"/category/:categoryName\" exact component={MoviesCategory} />\n            <Route path=\"/movie/:id\" exact component={MovieDetail} />\n            <Redirect path='/' to='category/popular' />\n            <Route component={NotFound} />\n          </Switch>\n        {/* </BrowserRouter> */}\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}